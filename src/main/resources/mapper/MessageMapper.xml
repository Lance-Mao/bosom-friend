<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.fb.dao.MessageDao">
    <!-- Message的resultMap,column是给数据库列起的别名,它对应property类的属性-->
    <resultMap id="result_Message_Map" type="com.fb.entity.Message">
        <id column="id" property="id" />
        <result column="user_id" property="userId" />
        <result column="friend_id" property="friendId" />
        <result column="content" property="content" />
        <result column="date" property="date" />
    </resultMap>

	   <!-- Assist用于辅助工具类setRequires设置的条件,${req.require}表示列名,#{req.value}表示值它是防SQL注入的 -->
    <sql id="Assist">
        <where>
            <foreach collection="require" item="req" separator=" ">
                ${req.require} #{req.value} <if test="req.suffix != null"> ${req.suffix}</if>
            </foreach>
        </where>
    </sql>

	   <!-- updateAssist用于更新数据的使用它拓展自Assist,用于辅助工具类setRequires设置的条件,${req.require}表示列名,#{req.value}表示值它是防SQL注入的 -->
    <sql id="updateAssist">
        <where>
            <foreach collection="assist.require" item="req" separator=" ">
                ${req.require} #{req.value} <if test="req.suffix != null"> ${req.suffix}</if>
            </foreach>
        </where>
    </sql>

    <!-- 数据库中表名为:bf_message的列名,as前是数据库的列明,as后是列的别名用于映射成实体类中的属性,需要注意的是别名必须与resultMap中的column别名一致 -->
    <sql id="bf_message_Column">
        bf_message.id as id
        ,bf_message.user_id as user_id
        ,bf_message.friend_id as friend_id
        ,bf_message.content as content
        ,bf_message.date as date
    </sql>

    <!--获得类名为:Message对应的数据库表的数据总行数 -->
    <select id="getMessageRowCount" parameterType="com.fb.common.Assist" resultType="java.lang.Long">
        select count(id) from bf_message
        <if test="require!=null"><include refid="Assist" /></if>
    </select>
    <!-- 获得类名为:Message对应数据库中表的数据集合 -->
    <select id="selectMessage" parameterType="com.fb.common.Assist" resultMap="result_Message_Map">
        select  <if test="distinct !=null">${distinct}</if>
        <choose>
            <when test="resultColumn!=null">${resultColumn}</when>
            <otherwise>
        <include refid="bf_message_Column" /> 
            </otherwise>
        </choose>
        from bf_message
        <choose>
            <when test="rowSize ==null">
                <if test="require!=null">
                    <include refid="Assist" />
                </if>
                <if test="order !=null">${order}</if>
            </when>
            <otherwise>
                inner join
                (
                SELECT id as primary_key FROM bf_message
                <if test="require!=null">
                    <include refid="Assist" />
                </if>
                <if test="order !=null">${order}</if>
                <choose>
                    <when test="startRow !=null and rowSize !=null">LIMIT #{startRow},#{rowSize} </when>
                    <when test="rowSize !=null">LIMIT #{rowSize}</when>
                 </choose>
                 ) as tmp
                 on tmp.primary_key=bf_message.id
            </otherwise>
        </choose>
    </select> 

    <!-- 获得一个Message对象,以参数Message对象中不为空的属性作为条件进行查询-->
    <select id="selectMessageByObj" parameterType="com.fb.entity.Message" resultMap="result_Message_Map">
        select 
            <include refid="bf_message_Column" /> 
        from bf_message
        <where>
            <if test="date != null "> and bf_message.date = #{date}</if>
            <if test="content != null "> and bf_message.content = #{content}</if>
            <if test="friendId != null "> and bf_message.friend_id = #{friendId}</if>
            <if test="userId != null "> and bf_message.user_id = #{userId}</if>
            <if test="id != null "> and bf_message.id = #{id}</if>
        </where>
    </select> 

    <!-- 通过Message的id获得对应数据库中表的数据对象-->
    <select id="selectMessageById" parameterType="java.lang.Integer" resultMap="result_Message_Map">
        select 
            <include refid="bf_message_Column" /> 
        from bf_message
        where bf_message.id = #{id}
    </select> 

    <!-- 将Message插入到对应数据库的表中,包括属性值为null的数据-->

    <insert id="insertMessage" parameterType="com.fb.entity.Message">
        insert into bf_message(id,user_id,friend_id,content,date) 
        values(#{id},#{userId},#{friendId},#{content},#{date})
    </insert>

    <!-- 将Message中属性值不为null的数据,插入到对应数据库的表中-->
    <insert id="insertNonEmptyMessage" parameterType="com.fb.entity.Message">
        insert into bf_message
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">id,</if>
            <if test="userId != null">user_id,</if>
            <if test="friendId != null">friend_id,</if>
            <if test="content != null">content,</if>
            <if test="date != null">date,</if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null"> #{id},</if>
            <if test="userId != null"> #{userId},</if>
            <if test="friendId != null"> #{friendId},</if>
            <if test="content != null"> #{content},</if>
            <if test="date != null"> #{date},</if>
        </trim>
    </insert>

    <!-- 通过Message的id将数据库表中对应的数据删除-->
    <delete id="deleteMessageById" parameterType="java.lang.Integer">
        delete from bf_message
        where id = #{id}
    </delete>

    <!-- 通过辅助工具Assist中的条件将Message对应的数据库表的数据删除-->
    <delete id="deleteMessage" parameterType="com.fb.common.Assist">
        delete from bf_message
        <if test="require!=null"><include refid="Assist" /></if>
    </delete>

    <!-- 通过Message的id将Message的数据更新到数据库中对应的表,包括值null的数据-->
    <update id="updateMessageById" parameterType="com.fb.entity.Message">
        update bf_message set
            user_id=#{userId}
            ,friend_id=#{friendId}
            ,content=#{content}
            ,date=#{date}
        where id=#{id}
    </update>

    <!-- 通过Message的id将Message中属性值不为null的数据更新到数据库对应的表中-->
    <update id="updateNonEmptyMessageById" parameterType="com.fb.entity.Message">
        update bf_message
        <set>
            <if test="userId != null">
                user_id=#{userId},
            </if>
            <if test="friendId != null">
                friend_id=#{friendId},
            </if>
            <if test="content != null">
                content=#{content},
            </if>
            <if test="date != null">
                date=#{date},
            </if>
        </set>
        where id=#{id}
    </update>

    <!-- 通过辅助工具Assist中的条件将Message中的数据更新到数据库对应的表中,包括值为null的数据-->
    <update id="updateMessage" parameterType="map">
        update bf_message
        <set>
                id=#{enti.id},
                user_id=#{enti.userId},
                friend_id=#{enti.friendId},
                content=#{enti.content},
                date=#{enti.date},
        </set>
        <if test="assist.require!=null"><include refid="updateAssist" /></if>
    </update>

    <!-- 通过辅助工具Assist中的条件将Message中属性值不为null的数据更新到数据库对应的表中-->
    <update id="updateNonEmptyMessage" parameterType="map">
        update bf_message
        <set>
            <if test="enti.id != null">
                id=#{enti.id},
            </if>
            <if test="enti.userId != null">
                user_id=#{enti.userId},
            </if>
            <if test="enti.friendId != null">
                friend_id=#{enti.friendId},
            </if>
            <if test="enti.content != null">
                content=#{enti.content},
            </if>
            <if test="enti.date != null">
                date=#{enti.date},
            </if>
        </set>
        <if test="assist.require!=null"><include refid="updateAssist" /></if>
    </update>

</mapper>